# QPDFTools Windows Build Implementation - Root Instructions

## Objective
Implement Windows build support for the QPDFTools project according to the detailed plan in windows_build_plan.md.

## Implementation Steps
1. Update CMake configuration files
   - Modify main CMakeLists.txt
   - Update src/CMakeLists.txt
   - Update resources/CMakeLists.txt
2. Create Windows-specific resources
   - Create Windows resource directory
   - Create Windows resource file (app.rc)
   - Create Windows icon file
3. Update external tool handling
   - Modify ExternalSoftware class
   - Implement platform-specific path handling
   - Update Ghostscript and QPDF classes
4. Create dependencies directory structure
   - Create directory structure for Windows dependencies
   - Add README for dependencies
5. Create build automation script
   - Create cross-platform build script
   - Make the script executable
6. Set up CI/CD for Windows builds
   - Create GitHub Actions workflow
7. Fix compatibility issues
   - Fix Qt::ColorScheme compatibility for Qt 6.2.4

## Mini Dependency Tracker
X 0A1 0A2 0A3 0A4 0A5 0A6 1A1 1A2 1B1 2A1 2A2 2A3 2A4 2A5
0A1 = o?????????????
0A2 = ?o????????????
0A3 = ??o???????????
0A4 = ???o??????????
0A5 = ????o?????????
0A6 = ?????o????????
1A1 = ??????o???????
1A2 = ???????o??????
1B1 = ????????o?????
2A1 = ?????????o????
2A2 = ??????????o???
2A3 = ???????????o??
2A4 = ????????????o<
2A5 = ?????????????o

## Key Definitions
0A1: CMakeLists.txt
0A2: resources/windows/app.rc
0A3: resources/windows/app.ico
0A4: deps/README.md
0A5: build.py
0A6: .github/workflows/build.yml
1A1: src/CMakeLists.txt
1A2: src/main.cpp
1B1: resources/CMakeLists.txt
2A1: src/api/externalSoftware.hpp
2A2: src/api/externalSoftware.cpp
2A3: src/api/ghostscript.cpp
2A4: src/api/qpdf.hpp
2A5: src/api/qpdf.cpp