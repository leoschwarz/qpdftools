name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.2.4'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2019_64'
          # The qtbase module (which includes Widgets and Concurrent) is installed by default
      
      - name: Download Ghostscript
        run: |
          Invoke-WebRequest -Uri "https://github.com/ArtifexSoftware/ghostpdl-downloads/releases/download/gs1000/gs1000w64.exe" -OutFile "gs-installer.exe"
          Start-Process -FilePath "gs-installer.exe" -ArgumentList "/S /D=C:\ghostscript" -Wait
          mkdir -p deps/ghostscript/bin
          Copy-Item "C:\ghostscript\bin\*" -Destination "deps/ghostscript/bin" -Recurse
      
      - name: Download QPDF
        run: |
          Invoke-WebRequest -Uri "https://github.com/qpdf/qpdf/releases/download/release-qpdf-10.6.3/qpdf-10.6.3-bin-mingw64.zip" -OutFile "qpdf.zip"
          Expand-Archive -Path "qpdf.zip" -DestinationPath "C:\qpdf"
          mkdir -p deps/qpdf/bin
          Copy-Item "C:\qpdf\qpdf-10.6.3\bin\*" -Destination "deps/qpdf/bin" -Recurse
      
      - name: Install ImageMagick
        run: |
          Invoke-WebRequest -Uri "https://imagemagick.org/archive/binaries/ImageMagick-7.1.1-29-Q16-HDRI-x64-dll.exe" -OutFile "imagemagick-installer.exe"
          Start-Process -FilePath "imagemagick-installer.exe" -ArgumentList "/SILENT /SP- /NORESTART" -Wait
      
      - name: Generate Windows Icon
        run: |
          # Create app.ico from SVG
          & "C:\Program Files\ImageMagick-7.1.1-Q16-HDRI\magick.exe" convert resources/icons/sc-apps-br.eng.silas.qpdftools.svg -define icon:auto-resize=16,32,48,64,128,256 resources/windows/app.ico
          # Verify the icon was created
          if (-Not (Test-Path resources/windows/app.ico)) {
            Write-Error "Failed to generate app.ico"
            exit 1
          }
      
      - name: Build
        run: |
          python build.py --platform windows --type release
      
      - name: Create Package
        run: |
          python build.py --platform windows --type release --package --portable
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            *.exe
            *.zip
          retention-days: 5
  
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake extra-cmake-modules qtbase5-dev libqt5concurrent5 qt5-qmake qttools5-dev-tools ghostscript qpdf
      
      - name: Build
        run: |
          python3 build.py --platform linux --type release
      
      - name: Create Package
        run: |
          python3 build.py --platform linux --type release --package
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: dist/
          retention-days: 5